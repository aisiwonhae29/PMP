  getlist: async function(req, params){
        const connection = await db.getConnection();
        await connection.beginTransaction();
        try{
            let sql = 
            `SELECT title, content, regist_date
            FROM employees
           `
        }catch(e){
            // await connection.rollback();
            console.error('Transaction rollbacked ======>',e);
            let err_result = JSON.parse(JSON.stringify(config.err_result));
            err_result.message = e;
            return err_result;
        }finally{connection.release();}
    },     
    signin: async function(req, params){
        const connection = await db.getConnection();
        await connection.beginTransaction();     
        try{
            // 내용
            let sql = ` 
                SELECT emp_no, birth_date, id, password, first_name, last_name, gender, hire_date
                FROM employees
                WHERE id = ?
            `
            let param = [params.id];
            let result = await connection.query(sql, param);
            let pass_result = await cipher.chkBcryptPass(params.password, result[0][0].password);
            if(pass_result){
                sess.setPlain(req, 'authority', config.user);
                sess.setPlain(req, 'user', result[0][0]);
                let suc_result = JSON.parse(JSON.stringify(config.suc_result));
                suc_result.data = result[0][0];
                return suc_result;
            }
        }catch(e){
            // await connection.rollback();
            console.error('Transaction rollbacked ======>',e);
            let err_result = JSON.parse(JSON.stringify(config.err_result));
            err_result.message = e;
            return err_result;
        }finally{
            connection.release();}},

// a number of parameter data passed the data by json orders

  update: async function(data, callback){
        let sql = `
            update board
            set
                title = ?,
                content = ?
            where board_id = ?
        `;
        let rslt = await db.queryTransaction(sql, [data.title, data.content, data.board_id]);
        callback(rslt);
    },

// get list 

    getlist: async function(req, params){

        const connection = await db.getConnection();
        await connection.beginTransaction();

        try{
            let sql = 
            `SElECT
                title,
                content,
                regist_date
            FROM employees
            `
        }catch(e){
            // await connection.rollback();
            console.error('Transaction rollbacked ======>',e);
            let err_result = JSON.parse(JSON.stringify(config.err_result));
            err_result.message = e;
            return err_result;
        }finally{
            connection.release();
        }
        
    },   